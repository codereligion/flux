/**
 * The flux build script.
 *
 * We automatically run checkstyle, pmd and findbugs during the check task.
 */
apply plugin: 'java'
apply plugin: 'checkstyle'
apply plugin: 'pmd'
apply plugin: 'findbugs'
apply plugin: 'jdepend'
apply plugin: 'build-dashboard'

repositories {
    mavenCentral()
}

dependencies {
    compile group: 'com.google.guava', name: 'guava', version: '14.0.1'
    compile group: 'com.google.code.findbugs', name: 'annotations', version: '1.3.9'
    compile group: 'com.google.code.findbugs', name: 'jsr305', version: '1.3.9'
    compile group: 'org.reflections', name: 'reflections', version: '0.9.9-RC1'
    compile group: 'net.sf.jung', name: 'jung-api', version: '2.0.1'
    compile group: 'net.sf.jung', name: 'jung-graph-impl', version: '2.0.1'
    compile group: 'net.sf.jung', name: 'jung-algorithms', version: '2.0.1'

    testCompile group: 'junit', name: 'junit', version: '4.11', transitive: true
    testCompile group: 'org.easymock', name: 'easymock', version: '3.1', transitive: true
    testCompile group: 'org.hamcrest', name: 'hamcrest-integration', version: '1.3', transitive: true
}

tasks.withType(Pmd) {
    reports {
        html.enabled = true
        xml.enabled = false
    }
}

tasks.withType(FindBugs) {
    reports {
        html.enabled = true
        xml.enabled = false
    }
}

tasks.withType(JDepend) {
    reports {
        text.enabled = true
        xml.enabled = false
    }
}

def generateCheckstyleReport(def checkType) {
    if (file("$buildDir/reports/checkstyle/${checkType}.xml").exists()) {
        ant.xslt(
            in: "$buildDir/reports/checkstyle/${checkType}.xml",
            style: "config/checkstyle/checkstyle.xsl",
            out: "$buildDir/reports/checkstyle/${checkType}.html"
        )
    }
}

task checkstyleReport << {
    generateCheckstyleReport("main")
    generateCheckstyleReport("test")
}

task quality(dependsOn: ['checkstyleMain', 'checkstyleTest'])

gradle.taskGraph.afterTask { Task task, TaskState state ->
    if (task.name in ['checkstyleMain', 'checkstyleTest']) {
        def matcher = task.name =~ /^checkstyle(.*)$/
        if (matcher.matches()) {
            def checkType = matcher.group(1).toLowerCase()
            generateCheckstyleReport(checkType)
        }
    }
}
