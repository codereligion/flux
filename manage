#!/usr/bin/env python

import argparse
import os
import sys

from clint.textui import colored

current = os.path.dirname(os.path.realpath(__file__))
parent = os.path.dirname(current)

hooks = [
    'applypatch-msg',
    'pre-applypatch',
    'post-applypatch',
    'pre-commit',
    'prepare-commit-msg',
    'commit-msg',
    'post-commit',
    'pre-rebase',
    'post-checkout',
    'post-merge',
    'pre-receive',
    'update',
    'post-receive',
    'post-update',
    'pre-auto-gc',
    'post-rewrite',
]

parser = argparse.ArgumentParser(description='Manages all git hooks for the current repository.')
commands = parser.add_subparsers(help='commands')
commands.add_parser('install', help='Installs the git hooks.').set_defaults(command='install')
commands.add_parser('uninstall', help='Uninstalls the git hooks.').set_defaults(command='uninstall')

args = parser.parse_args()


def relativize(path):
    return os.path.relpath(path, current)


try:
    hook_directory = os.path.join(parent, '.git/hooks')

    if not os.path.exists(hook_directory):
        raise IOError('%s does not exist' % hook_directory)

    if not os.path.isdir(hook_directory):
        raise IOError('%s is not a directory' % hook_directory)

    def install():
        print "Installing!"

        for hook in hooks:
            target = os.path.join(hook_directory, hook)
            dispatcher = os.path.join(current, 'dispatcher')

            # target exists, is a symlink and the target is our dispatcher
            if os.path.islink(target) and os.path.realpath(target) == dispatcher:
                # we can savely assume, we can overwrite it ;)
                os.unlink(target)

            if os.path.exists(target):
                # exists and is not one of our symlinks, leave it alone!
                state = colored.yellow('exists')
            else:
                try:
                    os.symlink(dispatcher, target)
                    state = colored.green('done')
                except OSError:
                    state = colored.red('failed')

            print 'Linking %s to %s [%s]' % (relativize(dispatcher), relativize(target), state)

    def uninstall():
        print "Uninstalling!"

    def unknown():
        raise Exception('Not yet implemented: %s' % args.command)

    mapping = {
        'install': install,
        'uninstall': uninstall
    }

    action = mapping.get(args.command, unknown)
    action()
except Exception, e:
    sys.stderr.write('%s\n' % e)
    sys.exit(1)